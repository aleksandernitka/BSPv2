plot(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'red', main = 'RT distribution, subject/condition')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
legend(3.5,1, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
}
else {
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0 ]), col = 'red')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
}
}
#ggplot(data = means_BSPv2, aes(Cond, mRT)) + geom_point(color="skyblue") + stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=1))
p = ggboxplot(means_BSPv2, x = "Cond", y = "mRT",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond")
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
p + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("RT")
ggdensity(means_BSPv2, x = "mRT",
add = "mean", rug = TRUE,
color = "Cond", fill = "Cond",
palette = c("dark red", "dark green", "dark blue"))
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_comparisons, label = "p.signif")+ # Add significance levels
stat_compare_means(label.y = 50)
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test, label = "p.signif")+ # Add significance levels
stat_compare_means(label.y = 50)
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test, label = "p.signif")#+ # Add significance levels
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test, label = "p.signif")+ # Add significance levels
stat_compare_means(method = "anova",label.y = 50)
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test, label = "p.signif")+ # Add significance levels
stat_compare_means(method = "anova",label.y = 1)
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test,) + # Add significance levels
stat_compare_means(method = "anova",label.y = 1)
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test) + # Add significance levels
stat_compare_means(method = "anova",label.y = 1)
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test)
plot(means_BSPv2$LettersDiff)
#ggplot(data = means_BSPv2, aes(Cond, mRT)) + geom_point(color="skyblue") + stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=1))
p = ggboxplot(means_BSPv2, x = "Cond", y = "mRT",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond")
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
p + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("RT + t.test")
ggdensity(means_BSPv2, x = "mRT",
add = "mean", rug = TRUE,
color = "Cond", fill = "Cond",
palette = c("dark red", "dark green", "dark blue"))
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test)
stat_compare_means(method = "anova",label.y = 1)
p
#ggplot(data = means_BSPv2, aes(Cond, mRT)) + geom_point(color="skyblue") + stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=1))
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
rt_plg = ggboxplot(means_BSPv2, x = "Cond", y = "mRT",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("RT + t.test")
rt_plg
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test)
stat_compare_means(method = "anova",label.y = 1)
#ggplot(data = means_BSPv2, aes(Cond, mRT)) + geom_point(color="skyblue") + stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=1))
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
rt_plg = ggboxplot(means_BSPv2, x = "Cond", y = "mRT",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("RT + t.test")
rt_plg
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_test, method = 't.test")
#ggplot(data = means_BSPv2, aes(Cond, mRT)) + geom_point(color="skyblue") + stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=1))
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
rt_plg = ggboxplot(means_BSPv2, x = "Cond", y = "mRT",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("RT + t.test")
rt_plg
ggviolin(means_BSPv2, x = "Cond", y = "mRT", fill = "Cond",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+ stat_compare_means(comparisons = my_test, method = 't.test')
View(means_BSPv2)
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettd_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test")
lettd_plg
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("ggplot2", "R.matlab", "ggpubr", "knitr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) {install.packages(new.packages)}
library(R.matlab)
library(ggplot2)
library(knitr)
library(ggpubr)
options(scipen = 999) # No to sci-notation
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettd_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test")
lettd_plg
View(BSPv2)
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test")
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test")
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test")
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond", ylim(0,4)) + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test")
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(0,4)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test")
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test")
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(-1,4)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test")
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test")
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(-1,4)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test") + ylim(-1,4)
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test") + ylim(-1,4)
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(-1,3)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test") + ylim(-1,3)
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test") + ylim(-1,3)
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(0,3)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test") + ylim(0,3)
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test") + ylim(0,3)
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(0,3.5)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test") + ylim(0,3)
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test") + ylim(0,3)
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test") + ylim(0,3.5)
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test") + ylim(-.5,3.5)
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test") + ylim(-.5,3.5)
lettDist_plg
my_test = list( c("cond0", "cond1"), c("cond1", "cond2"), c("cond0", "cond2") )
lettDiff_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDiff",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDiff + t.test")
lettDiff_plg
lettTar_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersTarget",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersTarget + t.test")
lettTar_plg
lettDist_plg = ggboxplot(means_BSPv2, x = "Cond", y = "LettersDistractor",
color = "Cond", palette =c("dark red", "dark green", "dark blue"),
add = "jitter", shape = "Cond") + stat_compare_means(comparisons = my_test, method = "t.test") + ggtitle("LettersDistractor + t.test")
lettDist_plg
rt_aov = aov(data = means_BSPv2$mRT ~ means_BSPv2$Cond)
rt_aov = aov(data = means_BSPv2, mRT ~ Cond)
summary(rt_aov)
rt_aov_ow = oneway.test(data = means_BSPv2, mRT ~ Cond)
rt_aov_ow
# as above but for cond0
shapiro.test(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'])
shapiro.test(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'])
shapiro.test(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'])
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("ggplot2", "R.matlab", "ggpubr", "knitr", "car")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) {install.packages(new.packages)}
library(R.matlab)
library(ggplot2)
library(knitr)
library(car)
library(ggpubr)
options(scipen = 999) # No to sci-notation
# Levene's test
leveneTest(mRT~Cond, data=means_BSPv2)
rt_aov = aov(data = means_BSPv2, mRT ~ Cond)
summary(rt_aov)
# Run this for variances not equal:
#rt_aov_ow = oneway.test(data = means_BSPv2, mRT ~ Cond)
rt_sw = shapiro.test(means_BSPv2$mRT)
# as above but for cond0, 1, 2
rt_sw_c0 = shapiro.test(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'])
rt_sw_c1 = shapiro.test(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'])
rt_sw_c2 = shapiro.test(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'])
rt_sw$p.value
rt_bt = bartlett.test(mRT~Cond, data=means_BSPv2)
# Levene's test (does the same as Bartlett), if NS homescedascity can be assumed.
rt_lt = leveneTest(mRT~Cond, data=means_BSPv2)
rt_bt$p.value
rt_lt$`Pr(>F)`
rt_lt$`Pr(>F)`[1]
rt_lt = leveneTest(mRT~Cond, data=means_BSPv2)
rt_lt_p = rt_lt$`Pr(>F)`[1] # because of stupid packing of this value
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("ggplot2", "R.matlab", "ggpubr", "knitr", "car")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) {install.packages(new.packages)}
library(R.matlab)
library(ggplot2)
library(knitr)
library(car)
library(ggpubr)
options(scipen = 999) # say no to sci-notation!
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'comd0'], col = 'red'))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red'))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue'))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red'))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue'))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue'))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0,3))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(1.5,3))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(1.5,3))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(1.5,3))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(1,2.5))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3))
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue')
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(3.5,1, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(1.5,1, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.3, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.3, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT)
rug(means_BSPv2$mRT, col = 'Cond')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.3, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT, col = 'Cond')
?rug()
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.3, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red')
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.3, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2)
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.3, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = 'green', lwd = 2)
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.5, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = 'green', lwd = 2)
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.5, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2, pch = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = 'green', lwd = 2)
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.5, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2, alpha = .5)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = 'green', lwd = 2)
# RT distributions for all subjects
# setup transparent colours
transparency = .5
redt = rgb(red = 1, green = 0, blue = 0, alpha = transparency)
greent = rgb(red = 0, green = 1, blue = 0, alpha = transparency)
bluet = rgb(red =0 , green = 0, blue = 1, alpha = transparency)
for (i in 1:length(SSid)){
if (i == 1){
plot(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'red', main = 'RT distribution, subject/condition')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0 ], col = redt)
transparency = .5
redt = rgb(red = 1, green = 0, blue = 0, alpha = transparency)
greent = rgb(red = 0, green = 1, blue = 0, alpha = transparency)
bluet = rgb(red =0 , green = 0, blue = 1, alpha = transparency)
i = 1
plot(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'red', main = 'RT distribution, subject/condition')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
# RT distributions for all subjects
# setup transparent colours
transparency = .5
redt = rgb(red = 1, green = 0, blue = 0, alpha = transparency)
greent = rgb(red = 0, green = 1, blue = 0, alpha = transparency)
bluet = rgb(red =0 , green = 0, blue = 1, alpha = transparency)
for (i in 1:length(SSid)){
if (i == 1){
plot(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'red', main = 'RT distribution, subject/condition')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
legend(3.5,1, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
}
else {
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0 ]), col = 'red')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
}
}
# Plot mean distributions
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.5, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = 'green', lwd = 2)
# RT distributions for all subjects
# setup transparent colours
transparency = .5
redt = rgb(red = 1, green = 0, blue = 0, alpha = transparency)
greent = rgb(red = 0, green = 1, blue = 0, alpha = transparency)
bluet = rgb(red =0 , green = 0, blue = 1, alpha = transparency)
for (i in 1:length(SSid)){
if (i == 1){
plot(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'red', main = 'RT distribution, subject/condition')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = bluet)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = greent)
legend(3.5,1, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
}
else {
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0 ]), col = 'red')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = bluet)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = greent)
}
}
# Plot mean distributions
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.5, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = 'red', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = 'blue', lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = 'green', lwd = 2)
# RT distributions for all subjects
# setup transparent colours
transparency = .5
redt = rgb(red = 1, green = 0, blue = 0, alpha = transparency)
greent = rgb(red = 0, green = 1, blue = 0, alpha = transparency)
bluet = rgb(red =0 , green = 0, blue = 1, alpha = transparency)
for (i in 1:length(SSid)){
if (i == 1){
plot(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'red', main = 'RT distribution, subject/condition')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = bluet)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = greent)
legend(3.5,1, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
}
else {
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0'  & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0 ]), col = 'red')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'blue')
lines(density(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0]), ylim = c(0,1), col = 'green')
# map individual trials on the rug - red, green, blue
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond0' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = redt)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond1' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = bluet)
rug(BSPv2$RT[BSPv2$SS == SSid[i] & BSPv2$Cond == 'cond2' & BSPv2$ProbeTrial == 0 & BSPv2$timeOut == 0], col = greent)
}
}
# Plot mean distributions
plot(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0']), col = 'red', xlim = c(0.5,2.3), main = 'RT distribution plots', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1']), col = 'blue', lwd = 2)
lines(density(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2']), col = 'green', lwd = 2)
legend(.5,2.5, c('cond0','cond1', 'cond2'), lty=c(1,1), lwd=c(2.5,2.5), col=c('red','blue','green'))
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond0'], col = redt, lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond1'], col = bluet, lwd = 2)
rug(means_BSPv2$mRT[means_BSPv2$Cond == 'cond2'], col = greent, lwd = 2)
